(window.multistep_editor_jsonpFunction=window.multistep_editor_jsonpFunction||[]).push([[22],{856:function(t,e){t.exports='<au-input-text id="input-text"></au-input-text>\r\n'},857:function(t,e){t.exports='<style>\r\n    :host {\r\n        --au-input-color: var(--theme-font-color);\r\n        --au-input-color-hover: var(--theme-grey-color);\r\n        --au-input-color-active: var(--theme-primary-color);\r\n        --au-input-color-error: var(--theme-error-color);\r\n        --au-input-color-disabled: var(--theme-border-color);\r\n        --au-input-color-border: var(--theme-light-grey-color);\r\n    }\r\n\r\n    textarea,\r\n    input {\r\n        @apply --au-body1-font;\r\n        letter-spacing: 0.25px;\r\n\r\n        padding: var(--au-widget-padding, 11px 12px);\r\n\r\n        box-sizing: border-box;\r\n        border-radius: 3px;\r\n        border: none;\r\n\r\n        width: 100%;\r\n        resize: none;\r\n\r\n        outline: none;\r\n\r\n        transition: box-shadow .25s ease, color .25s ease;\r\n    }\r\n\r\n    .input textarea,\r\n    .input input {\r\n        box-shadow: 0 0 0 1px var(--au-input-color-disabled);\r\n    }\r\n\r\n    .input:hover textarea,\r\n    .input:hover input {\r\n        box-shadow: 0 0 0 1px var(--au-input-color-border);\r\n    }\r\n\r\n    .input--active textarea,\r\n    .input--active input,\r\n    .input--active:hover textarea,\r\n    .input--active:hover input {\r\n        box-shadow: 0 0 0 2px var(--au-input-color-active);\r\n    }\r\n\r\n    .input--error textarea,\r\n    .input--error input,\r\n    .input--error:hover textarea,\r\n    .input--error:hover input {\r\n        box-shadow: 0 0 0 2px var(--au-input-color-error);\r\n    }\r\n\r\n    .input--disabled textarea,\r\n    .input--disabled input,\r\n    .input--disabled:hover textarea,\r\n    .input--disabled:hover input {\r\n        box-shadow: 0 0 0 2px var(--au-input-color-error);\r\n    }\r\n\r\n    .input__label,\r\n    .input__support-text {\r\n        @apply --au-caption-font;\r\n    }\r\n\r\n    .input__label {\r\n        margin-bottom: 4px;\r\n    }\r\n\r\n    .input__support {\r\n        margin-top: 4px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n    }\r\n\r\n    .input .input__label,\r\n    .input .input__support-text {\r\n        color: var(--au-input-color);\r\n    }\r\n\r\n    .input:hover .input__label,\r\n    .input:hover .input__support-text {\r\n        color: var(--au-input-color-hover);\r\n    }\r\n\r\n    .input--active .input__label,\r\n    .input--active:hover .input__label {\r\n        color: var(--au-input-color-active);\r\n    }\r\n\r\n    .input--active .input__support-text {\r\n        color: var(--au-input-color);\r\n    }\r\n\r\n    .input--error .input__label,\r\n    .input--error .input__support-text,\r\n    .input--error:hover .input__label,\r\n    .input--error:hover .input__support-text {\r\n        color: var(--au-input-color-error);\r\n    }\r\n\r\n    .input--disabled .input__label,\r\n    .input--disabled .input__support-text,\r\n    .input--disabled:hover .input__label,\r\n    .input--disabled:hover .input__support-text {\r\n        color: var(--au-input-color-disabled);\r\n    }\r\n</style>\r\n\r\n<div id="input" class="input">\r\n    <template is="dom-if" if="[[label]]">\r\n        <div class="input__label">\r\n            {{label}}\r\n        </div>\r\n    </template>\r\n    <div class="input__input">\r\n        <template is="dom-if" if="[[isTextArea]]">\r\n            <textarea placeholder="[[placeholder]]" rows="[[rows]]" value="{{value::input}}" onfocus="[[onFocus]]"\r\n                      onblur="[[onBlur]]" maxlength="[[maxLength]]"></textarea>\r\n        </template>\r\n        <template is="dom-if" if="[[!isTextArea]]">\r\n            <input placeholder="[[placeholder]]" value="{{value::input}}" maxlength="[[maxLength]]" type="[[type]]"\r\n                   min="[[minValue]]" max="[[maxValue]]" pattern="[[allowedPattern]]" error-message="[[errorMessage]]"\r\n                   onfocus="[[onFocus]]" onblur="[[onBlur]]" invalid="{{invalid}}"/>\r\n        </template>\r\n    </div>\r\n    <template is="dom-if" if="[[supportText]]">\r\n        <div class="input__support">\r\n            <span class="input__support-text">\r\n                {{supportText}}\r\n            </span>\r\n            <template is="dom-if" if="[[maxLength]]">\r\n                <span class="input__support-length">\r\n                    {{value.length}}/{{maxLength}}\r\n                </span>\r\n            </template>\r\n        </div>\r\n    </template>\r\n</div>'},927:function(t,e,r){"use strict";r.r(e);var n=r(0),i=r(856),a=r(117),o=r(1),u=r(6),s=r(857),p=r(12),l=r(52),d=r(35),h=r(13),c=r(372);let v=class extends p.a{constructor(){super(),this.widget=null,this.defaultValue="",this.allowedPattern=".*",this.type="text",this.invalid=!1,this.rows=3,this.errorMessage="",this._configuration={},this.onFocus=this.onFocus.bind(this),this.onBlur=this.onBlur.bind(this),this.onError=this.onError.bind(this),this.nonError=this.nonError.bind(this)}clearSelection(){this.value=""}_getCastedValue(){return"number"===this.type?Number(this.value):this.value}validateConstrains(t){let e=(t,e,r)=>e(t)?l.Either.left(r(t)):l.Either.right(t);switch(this.type){case"number":return l.Either.right(t.toString()).bind(t=>e(t,t=>Object(c.e)(t),t=>new Error("A value cannot be empty. Enter some number."))).map(t=>Number(t)).bind(r=>e(r,t=>isNaN(t),e=>new Error(`The value ${t} is not a number`))).bind(t=>e(t,t=>u.a.isNotUndefined(this.maxLength)&&t<=0||Math.floor(Math.log10(t)+1)>this.maxLength,t=>new Error(`The number of digits in ${t} exceeds ${this.maxLength} or the number is negative.`))).bind(t=>e(t,t=>t<this.minValue,t=>new Error(`The value ${t} should be greater or equal ${this.minValue}.`))).bind(t=>e(t,t=>t>this.maxValue,t=>new Error(`The value ${t} should be less or equal ${this.maxValue}.`)));case"text":return l.Either.right(t.toString()).bind(t=>e(t,t=>t.length>this.maxLength,t=>new Error(`The value length ${t} exceeded max length ${this.maxLength}`))).bind(t=>e(t,t=>!new RegExp(this.allowedPattern,this.patternFlags).test(t),t=>new Error(`The value ${t} does not match the required pattern`)));default:return l.Either.left(new Error(`The input type ${this.type} is not supported`))}}valueChanged(t){this._debouncer=d.a.debounce(this._debouncer,h.d.after(250),()=>{this.validateConstrains(t).caseOf({left:t=>{this.onError(t.message),this.widgetEmitChange()},right:t=>{this.value=t,this.nonError(),this.fireEvent("value",{value:this._getCastedValue()})}})})}widgetEmitChange(){this.widget&&this.widget.emitChange()}get _(){return this._getCastedValue()}set configuration(t){this._configuration=t,this.updateParams(t)}updateParams(t){this.defaultValue=u.a.isNotNullOrUndefined(t.defaultValue)?t.defaultValue:"",this.minValue=u.a.isNotNullOrUndefined(t.min)?t.min:Number.NEGATIVE_INFINITY,this.maxValue=u.a.isNotNullOrUndefined(t.max)?t.max:Number.POSITIVE_INFINITY,this.placeholder=t.placeholder||t.prompt||"",this.maxLength=t.maxLength,this.isTextArea=t.isTextArea||!1,this.type=!0===t.isNumber?"number":t.type||"text",this.allowedPattern=t.pattern||".*",this.patternFlags=t.patternFlags||"g",this.rows=t.rows||2,this.label=t.label||t.prompt||"",this.supportText=t.supportText||"",u.a.isNotNullOrUndefined(t.value)&&(this.value=t.value),(u.a.isNullOrUndefined(this.value)||""===this.value)&&(this.value=this.defaultValue)}onFocus(){this.$.input.classList.add("input--active")}onBlur(){this.$.input.classList.remove("input--active")}onError(t){u.a.isNotNullOrUndefined(t)&&(this.errorMessage=t,this.supportText=t),this.invalid=!0,this.$.input.classList.add("input--error")}nonError(){this.errorMessage="",this.invalid=!1,this.supportText=this._configuration.supportText,this.$.input.classList.contains("input--error")&&this.$.input.classList.remove("input--error")}};n.b([Object(o.c)(),n.d("design:type",Boolean)],v.prototype,"isTextArea",void 0),n.b([Object(o.c)(),n.d("design:type",Object)],v.prototype,"value",void 0),n.b([Object(o.c)(),n.d("design:type",String)],v.prototype,"placeholder",void 0),n.b([Object(o.c)(),n.d("design:type",Number)],v.prototype,"maxLength",void 0),n.b([Object(o.c)(),n.d("design:type",Object)],v.prototype,"defaultValue",void 0),n.b([Object(o.c)(),n.d("design:type",Number)],v.prototype,"minValue",void 0),n.b([Object(o.c)(),n.d("design:type",Number)],v.prototype,"maxValue",void 0),n.b([Object(o.c)(),n.d("design:type",String)],v.prototype,"allowedPattern",void 0),n.b([Object(o.c)(),n.d("design:type",String)],v.prototype,"type",void 0),n.b([Object(o.b)("value"),n.d("design:type",Function),n.d("design:paramtypes",[Object]),n.d("design:returntype",void 0)],v.prototype,"valueChanged",null),v=n.b([Object(o.a)("au-input-text",s),n.d("design:paramtypes",[])],v),r.d(e,"AuWidgetInputText",function(){return b}),r.d(e,"widget",function(){return b});let b=class extends a.b{constructor(){super(...arguments),this._isRestoring=!1}connectedCallback(){super.connectedCallback();const t=this._getInputElement();t.widget=this,t.addEventListener("value",t=>{this.value=t.detail.value,this.emitChange({value:this.value}),this._onChange&&this._onChange(this.value)})}clearSelection(){this._getInputElement().value=""}get _(){return this.value}updateParams(t){this._getInputElement().configuration=t,this.defaultValue=t.defaultValue,t.onChange&&(this._onChange=u.a.functionWrapperConstructor(t.onChange))}async exportWidgetData(t){return{text:this.value}}async restoreWidgetFromData(t,e){t&&this.value!==t.text&&(this._isRestoring=!0,this._getInputElement().value=t.text.toString()),this._isRestoring=!1}_getInputElement(){return this.$["input-text"]}get invalid(){return this.$["input-text"].invalid}};n.b([Object(o.c)(),n.d("design:type",Object)],b.prototype,"params",void 0),b=n.b([Object(o.a)("au-widget-input-text",i)],b)}}]);